package farm3.spring.model;
// Generated Sep 25, 2016 9:18:21 PM by Hibernate Tools 4.3.1.Final

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.google.gson.annotations.Expose;


/**
 * Tool generated by hbm2java
 */
@Entity
@Table(name = "tool")
public class Tool implements java.io.Serializable {

	@Id
	@Column(name="id")
	@GeneratedValue(strategy=GenerationType.AUTO)
	private Integer id;
	@ManyToOne
	@JoinColumn(name = "type_tool_id")
	private TypeTool typeTool;
	@ManyToOne
	@JoinColumn(name = "unit_tool_id")
	@Expose private UnitTool unitTool;
	@Column(name = "name")
	private String name;
	@Column(name = "quantity")
	@Expose private Integer quantity;
	@Column(name = "quantity_borrow")
	private Integer quantityBorrow;
	@Column(name = "quantity_broken")
	private Integer quantityBroken;
	@Column(name = "place")
	private String place;
	@Column(name = "statusalert")
	private int statusalert;
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "tool")
	@Fetch(value = FetchMode.SUBSELECT)
	private List<ToolImport> toolImports ;
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "tool")
	@Fetch(value = FetchMode.SUBSELECT)
	private List<ToolOrder> toolOrders;
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "tool")
	@Fetch(value = FetchMode.SUBSELECT)
	private List<ToolRelease> toolReleases;
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "tool")
	@Fetch(value = FetchMode.SUBSELECT)
	private List<ToolBorrow> toolBorrows;
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "tool")
	@Fetch(value = FetchMode.SUBSELECT)
	private List<ToolBroken> toolBrokens;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public TypeTool getTypeTool() {
		return typeTool;
	}
	public void setTypeTool(TypeTool typeTool) {
		this.typeTool = typeTool;
	}
	public UnitTool getUnitTool() {
		return unitTool;
	}
	public void setUnitTool(UnitTool unitTool) {
		this.unitTool = unitTool;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getQuantity() {
		return quantity;
	}
	public void setQuantity(Integer quantity) {
		this.quantity = quantity;
	}
	public Integer getQuantityBorrow() {
		return quantityBorrow;
	}
	public void setQuantityBorrow(Integer quantityBorrow) {
		this.quantityBorrow = quantityBorrow;
	}
	public Integer getQuantityBroken() {
		return quantityBroken;
	}
	public void setQuantityBroken(Integer quantityBroken) {
		this.quantityBroken = quantityBroken;
	}
	public String getPlace() {
		return place;
	}
	public void setPlace(String place) {
		this.place = place;
	}
	public int getStatusalert() {
		return statusalert;
	}
	public void setStatusalert(int statusalert) {
		this.statusalert = statusalert;
	}
	public List<ToolImport> getToolImports() {
		return toolImports;
	}
	public void setToolImports(List<ToolImport> toolImports) {
		this.toolImports = toolImports;
	}
	public List<ToolOrder> getToolOrders() {
		return toolOrders;
	}
	public void setToolOrders(List<ToolOrder> toolOrders) {
		this.toolOrders = toolOrders;
	}
	public List<ToolRelease> getToolReleases() {
		return toolReleases;
	}
	public void setToolReleases(List<ToolRelease> toolReleases) {
		this.toolReleases = toolReleases;
	}
	public List<ToolBorrow> getToolBorrows() {
		return toolBorrows;
	}
	public void setToolBorrows(List<ToolBorrow> toolBorrows) {
		this.toolBorrows = toolBorrows;
	}
	public List<ToolBroken> getToolBrokens() {
		return toolBrokens;
	}
	public void setToolBrokens(List<ToolBroken> toolBrokens) {
		this.toolBrokens = toolBrokens;
	}
	/*private Integer id;
	private TypeTool typeTool;
	@Expose private UnitTool unitTool;
	private String name;
	@Expose private Integer quantity;
	private Integer quantityBorrow;
	private Integer quantityBroken;
	private String place;
	private int statusalert;
	private Set<ToolImport> toolImports = new HashSet<ToolImport>(0);
	private Set<ToolOrder> toolOrders = new HashSet<ToolOrder>(0);
	private Set<ToolRelease> toolReleases = new HashSet<ToolRelease>(0);
	private Set<ToolBorrow> toolBorrows = new HashSet<ToolBorrow>(0);
	private Set<ToolBroken> toolBrokens = new HashSet<ToolBroken>(0);

	public Tool() {
	}

	public Tool(TypeTool typeTool, UnitTool unitTool, int statusalert) {
		this.typeTool = typeTool;
		this.unitTool = unitTool;
		this.statusalert = statusalert;
	}

	public Tool(TypeTool typeTool, UnitTool unitTool, String name, Integer quantity, Integer quantityBorrow,
			Integer quantityBroken, String place, int statusalert, Set<ToolImport> toolImports,
			Set<ToolOrder> toolOrders, Set<ToolRelease> toolReleases, Set<ToolBorrow> toolBorrows,
			Set<ToolBroken> toolBrokens) {
		this.typeTool = typeTool;
		this.unitTool = unitTool;
		this.name = name;
		this.quantity = quantity;
		this.quantityBorrow = quantityBorrow;
		this.quantityBroken = quantityBroken;
		this.place = place;
		this.statusalert = statusalert;
		this.toolImports = toolImports;
		this.toolOrders = toolOrders;
		this.toolReleases = toolReleases;
		this.toolBorrows = toolBorrows;
		this.toolBrokens = toolBrokens;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "type_tool_id", nullable = false)
	public TypeTool getTypeTool() {
		return this.typeTool;
	}

	public void setTypeTool(TypeTool typeTool) {
		this.typeTool = typeTool;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "unit_tool_id", nullable = false)
	public UnitTool getUnitTool() {
		return this.unitTool;
	}

	public void setUnitTool(UnitTool unitTool) {
		this.unitTool = unitTool;
	}

	@Column(name = "name", unique = true, length = 150)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "quantity")
	public Integer getQuantity() {
		return this.quantity;
	}

	public void setQuantity(Integer quantity) {
		this.quantity = quantity;
	}

	@Column(name = "quantity_borrow")
	public Integer getQuantityBorrow() {
		return this.quantityBorrow;
	}

	public void setQuantityBorrow(Integer quantityBorrow) {
		this.quantityBorrow = quantityBorrow;
	}

	@Column(name = "quantity_broken")
	public Integer getQuantityBroken() {
		return this.quantityBroken;
	}

	public void setQuantityBroken(Integer quantityBroken) {
		this.quantityBroken = quantityBroken;
	}

	@Column(name = "place", length = 50)
	public String getPlace() {
		return this.place;
	}

	public void setPlace(String place) {
		this.place = place;
	}

	@Column(name = "statusalert", nullable = false)
	public int getStatusalert() {
		return this.statusalert;
	}

	public void setStatusalert(int statusalert) {
		this.statusalert = statusalert;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tool")
	public Set<ToolImport> getToolImports() {
		return this.toolImports;
	}

	public void setToolImports(Set<ToolImport> toolImports) {
		this.toolImports = toolImports;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tool")
	public Set<ToolOrder> getToolOrders() {
		return this.toolOrders;
	}

	public void setToolOrders(Set<ToolOrder> toolOrders) {
		this.toolOrders = toolOrders;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tool")
	public Set<ToolRelease> getToolReleases() {
		return this.toolReleases;
	}

	public void setToolReleases(Set<ToolRelease> toolReleases) {
		this.toolReleases = toolReleases;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tool")
	public Set<ToolBorrow> getToolBorrows() {
		return this.toolBorrows;
	}

	public void setToolBorrows(Set<ToolBorrow> toolBorrows) {
		this.toolBorrows = toolBorrows;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tool")
	public Set<ToolBroken> getToolBrokens() {
		return this.toolBrokens;
	}

	public void setToolBrokens(Set<ToolBroken> toolBrokens) {
		this.toolBrokens = toolBrokens;
	}*/

}
